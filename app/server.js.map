{"version":3,"sources":["../server/server.js"],"names":[],"mappings":"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","file":"server.js","sourcesContent":["import {RtmClient, RTM_EVENTS, RTM_MESSAGE_SUBTYPES, CLIENT_EVENTS, WebClient} from '@slack/client';\nimport {isNil, isNull} from 'lodash';\nimport express from 'express';\nimport config from '../config';\n\nconst token = config.slack.token;\n// #obedbot-testing id - 'G1TT0TBAA'\n//const channelId = 'G1TT0TBAA';\nconst channelId = config.slack.channelId;\nconst botUserId = config.slack.botId;\nconst atObedbot = new RegExp(\"<@\" + botUserId + \">\");\nconst reactions = ['jedlopodnos', 'corn', 'spaghetti', 'shopping_bags'];\n\nlet veglife = [];\nlet jpn = [];\nlet spaghetti = [];\nlet nakup = [];\n// ts = timestamp\nlet lastCall = { ts: null, timeLeft: null };\nconst lastCallLength = config.lastCall.length;\nconst lastCallStep = config.lastCall.step;\n\n\nconst port = config.port;\nlet rtm;\nlet web;\n\n\n/**\n * Returns string with pretty printed json object\n *\n * @param {Object} json - json object\n * @returns {string} - pretty printed json string\n */\nfunction prettyPrint(json) {\n  return JSON.stringify(json, null, 2);\n}\n\n/**\n * Makes the last call for orders\n */\nfunction makeLastCall() {\n  if (isNull(lastCall.ts)) {\n    lastCall.timeLeft = lastCallLength;\n    rtm.sendMessage('Last call ' + lastCall.timeLeft, channelId,\n      function messageSent(err, msg) {\n        console.log('Sent last call message', err, msg);\n        \n        lastCall.ts = msg.ts;\n        lastCall.timeLeft = lastCallLength;\n        \n        setTimeout(makeLastCall, lastCallStep * 1000);\n      }\n    );  \n  } else if (lastCall.timeLeft > 0 && lastCall.timeLeft <= lastCallLength) {\n    lastCall.timeLeft -= lastCallStep;\n    \n    web.chat.update(lastCall.ts, channelId, 'Last call ' + lastCall.timeLeft);\n    \n    setTimeout(makeLastCall, lastCallStep * 1000);\n  } else if (lastCall.timeLeft <= 0) {\n    web.chat.update(lastCall.ts, channelId, 'Koniec objednavok');\n    \n    lastCall.timeLeft = null;\n    lastCall.ts = null;\n  } else {\n    console.log('This should not happen');\n  }\n}\n\n/**\n * Strips the @obedbot part of the message\n *\n * @param {string} order - message with the order\n * @returns {string} - order message without the @obedbot mention\n */\n\nfunction stripMention(order) {\n  //check if user used full colon after @obedbot\n  const orderStart = (order.charAt(12) === ':') ? 14 : 13;\n  \n  return order.substring(orderStart);\n}\n\n/**\n * Checks the incoming order and assigns it to the correct restaurant\n *\n * @param {string} order - order message\n * @param {string} ts - timestamp of the order message\n * @returns {bool} - true if order matches, false if not identified\n */\nfunction processOrder(order, ts) {\n  order = order.toLowerCase();\n  console.log('Processing order:', order);\n  if (order.match(/veg[1-4]\\+?[ps]?/)) {\n    console.log('Veglife', order);\n    veglife.push({ts: ts, order: order});\n  } else if (order.match(/[1-8]\\+[pk]/)) {\n    console.log('Jedlo pod nos');\n    jpn.push({ts: ts, order: order});\n  } else if (order.match(/[a-z]((300)|(400)|(450)|(600)|(800))([psc]{1,2})?\\+?[pt]?/)) {\n    console.log('Spaghetti');\n    spaghetti.push({ts: ts, order: order});\n  } else if (order.match(/^nakup/)) {\n    console.log('Nakup', order.substring(6));\n    nakup.push({ts: ts, order: order.substring(6)});\n  } else {\n    console.log('ziadna restika, plany poplach');\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * Updates the order with the given ts to newOrder\n *\n * @param {string} newOrder - new order message\n * @param {string} ts - timestamp of the order message\n * @returns {bool} - true if order with supplied ts is found, false otherwise\n */\nfunction updateOrder(newOrder, ts) {\n  const orders = [...jpn, ...veglife, ...spaghetti, ...nakup];\n\n  for (let order of orders) {\n    if (order.ts === ts) {\n      order.order = newOrder;\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Removes the order with the given ts\n *\n * @param {string} ts - timestamp of the order message\n * @returns {bool} - true if order with supplied ts is deleted, false otherwise\n */\nfunction removeOrder(ts) {\n  const restaurants = [jpn, veglife, spaghetti, nakup];\n\n  for (let restaurant of restaurants) {\n    for (let order in restaurant) {\n      if (restaurant[order].ts === ts) {\n        restaurant.splice(order, 1);\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\n/**\n * Adds reaction to the message to confirm the order\n *\n * @param {string} ts - timestamp of the order message\n *\n */\n\nfunction confirmOrder(ts) {\n  // key of the object is the reaction to the order on slack\n  // reactions are custom/aliases of slack reactions\n  const restaurants = {\n    jedlopodnos: jpn,\n    veglife: veglife,\n    spaghetti: spaghetti,\n    nakup: nakup,\n  };\n\n  for (let key in restaurants) {\n    if (restaurants.hasOwnProperty(key)) {\n      for (let order of restaurants[key]) {\n        if (order.ts === ts) {\n          web.reactions.add(key, {channel: channelId, timestamp: ts});\n        }\n      }\n    }\n  }\n}\n\n/**\n * Pads and sorts the array to length 'size' with empty orders at the end.\n * Orders are sorted by arr[].order \n *\n * @param {Object[]} orders - Array with orders\n * @param {string} orders[].ts - Slack timestamp of the order message\n * @param {string} orders[].order - Message with the order\n * @param {number} size - desired length of the array\n * @returns {Object[]} - padded array with alphabetically ordered orders\n */\nfunction padArray(orders, size) {\n  orders.sort((a, b) => a.order.localeCompare(b.order));\n\n  while (orders.length !== size) {\n    orders.push({ts: 'fake time', order: ''});\n  }\n\n  return orders;\n}\n\n/**\n * Function called by slack api after receiving message event\n *\n * @param {Object} res - response slack api received\n *\n */\n\nfunction messageReceived(res) {\n  console.log('Message Arrived:\\n', prettyPrint(res));\n  \n  if (isNil(res.subtype)) {\n    let order = res.text;\n    \n    if (order.match(atObedbot)) {\n      order = stripMention(order);\n\n      if (processOrder(order.toLowerCase(), res.ts)) {\n        confirmOrder(res.ts);\n      }\n    }\n  } else if (res.subtype === RTM_MESSAGE_SUBTYPES.MESSAGE_CHANGED) {\n    console.log('Received an edited message');\n    \n    // edited last call message came in\n    if (!isNull(lastCall.ts) && res.previous_message.ts === lastCall.ts) {\n      console.log('Received last call message edited by obedbot.');\n    } else {\n      console.log('Received edited message.');\n      let order = res.message.text;\n      \n      if (order.match(atObedbot)) {\n        order = stripMention(order);\n        \n        if (updateOrder(order, res.message.ts)) {\n          console.log('Updated some order.');\n        } else {\n          console.log('Order with such id does not exist.');\n          \n          if (processOrder(order.toLowerCase(), res.message.ts)) {\n            confirmOrder(res.message.ts);\n          }\n        }\n      }\n    }\n  } else if (res.subtype === RTM_MESSAGE_SUBTYPES.MESSAGE_DELETED) {\n    console.log('Deleting order:', res.previous_message.text)\n    removeOrder(res.previous_message.ts);\n  }\n}\n\n/**\n * Checks whether the order with given timestamp exists\n *\n * @param {string} ts - timestamp of the order\n * @returns {bool} - true if order exists, false otherwise\n */\n\nfunction orderExists(ts) {\n  const orders = [...jpn, ...veglife, ...spaghetti, ...nakup];\n\n  for (let order of orders) {\n    if (order.ts === ts) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Loads the orders since the last noon\n */\n\nfunction loadTodayOrders() {\n  console.log('Loading today\\'s orders from', channelId);\n  \n  let lastNoon = new Date();\n  let now = lastNoon.getTime();\n\n  if (lastNoon.getHours() < 12) {\n    lastNoon.setDate(lastNoon.getDate() - 1);\n  }\n\n  lastNoon.setHours(12);\n  lastNoon.setMinutes(0);\n  lastNoon.setSeconds(0);\n\n  let messages = web.channels.history(\n    channelId,\n    {\n      latest: now / 1000,\n      oldest: lastNoon.getTime() / 1000\n    }\n  ).then((data) => {\n    for (let message of data.messages) {\n      console.log(prettyPrint(message));\n\n      let order = message.text;\n      if (!orderExists(message.ts)) {\n        if (order.match(atObedbot)) {\n          order = stripMention(order);\n\n          if (processOrder(order.toLowerCase(), message.ts)) {\n            web.reactions.get(\n              {\n                channel: channelId,\n                timestamp: message.ts,\n                full: true\n              }\n            ).then((res) => {\n              console.log( 'Checking order confirmation:', prettyPrint(res));\n\n              if (isNil(res.message.reactions)) {\n                confirmOrder(res.message.ts);\n              } else {\n                console.log('Reactions:', prettyPrint(res.message.reactions));\n\n                // if order hasn't been confirmed\n                if (res.message.reactions.filter((r) => reactions.indexOf(r.name) > -1).length === 0) {\n                  confirmOrder(res.message.ts);\n                }\n              }\n            });\n          }\n        }\n      }\n    }\n    console.log('Loaded today\\'s orders');\n  });\n}\n\nfunction renderOrders(req, res) {\n  const maxOrders = Math.max(veglife.length, jpn.length, spaghetti.length, nakup.length);\n  /*console.log('Orders:');\n  console.log('Veglife:', veglife);\n  console.log('Jedlo pod nos:', jpn);\n  console.log('Leviathan:', spaghetti);\n\n  console.log('Veglife:', padArray(veglife.slice(), maxOrders));\n  console.log('Jedlo pod nos:', padArray(jpn.slice(), maxOrders));\n  console.log('Leviathan:', padArray(spaghetti.slice(), maxOrders));\n  */\n  res.render('index', {\n    title: 'Obedbot page',\n    tableName: 'Dne\\u0161n\\u00E9 objedn\\u00E1vky',\n    maxOrders: maxOrders,\n    allOrders: {\n      'Jedlo pod nos': padArray(jpn.slice(), maxOrders),\n      'Veglife': padArray(veglife.slice(), maxOrders),\n      'Spaghetti': padArray(spaghetti.slice(), maxOrders),\n      'Nakup': padArray(nakup.slice(), maxOrders)\n    },\n  });\n}\n\n/**\n * Starts the bot server\n */\nexport function runServer() {\n  const app = express();\n  rtm = new RtmClient(token, {logLevel: 'error'});\n  web = new WebClient(token);\n\n  app.set('view engine', 'pug');\n  app.use(express.static('public'));\n\n  app.get('/', renderOrders);\n\n  app.listen(port, () => {\n    console.log('Server listening on port', port);\n  });\n\n  rtm.start();\n  console.log('slack server started');\n\n  rtm.on(RTM_EVENTS.MESSAGE, messageReceived);\n\n  rtm.on(CLIENT_EVENTS.RTM.RTM_CONNECTION_OPENED, function () {\n    // the timeout is here to go around a bug where connection is opened, but not properly established\n    console.log('Connected');\n\n    setTimeout(loadTodayOrders, 3000);\n  });\n}\n"]}