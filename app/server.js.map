{"version":3,"sources":["../server/server.js"],"names":[],"mappings":";;;;;QA8KgB,S,GAAA,S;;AA9KhB;;AACA;;AACA;;;;AACA;;;;;;AAEA,MAAM,QAAQ,iBAAO,KAAP,CAAa,KAA3B;AACA;AACA;AACA,MAAM,YAAY,iBAAO,KAAP,CAAa,SAA/B;AACA,MAAM,YAAY,iBAAO,KAAP,CAAa,KAA/B;AACA,MAAM,YAAY,IAAI,MAAJ,CAAW,QAAQ,SAAR,GAAoB,GAA/B,CAAlB;;AAEA,IAAI,UAAU,EAAd;AACA,IAAI,MAAM,EAAV;AACA,IAAI,YAAY,EAAhB;AACA,IAAI,QAAQ,EAAZ;AACA;AACA,IAAI,WAAW;AACb,MAAI,IADS;AAEb,YAAU;AAFG,CAAf;AAIA,MAAM,iBAAiB,iBAAO,QAAP,CAAgB,MAAvC;AACA,MAAM,eAAe,iBAAO,QAAP,CAAgB,IAArC;;AAEA,MAAM,OAAO,iBAAO,IAApB;AACA,IAAI,GAAJ;AACA,IAAI,GAAJ;AACA,IAAI,GAAJ;;AAEA;;;AAGA,SAAS,YAAT,GAAwB;AACtB,MAAI,oBAAO,SAAS,EAAhB,CAAJ,EAAyB;AACvB,aAAS,QAAT,GAAoB,cAApB;AACA,QAAI,WAAJ,CAAgB,eAAe,SAAS,QAAxC,EAAkD,SAAlD,EACE,SAAS,WAAT,CAAqB,GAArB,EAA0B,GAA1B,EAA+B;AAC7B,cAAQ,GAAR,CAAY,wBAAZ,EAAsC,GAAtC,EAA2C,GAA3C;;AAEA,eAAS,EAAT,GAAc,IAAI,EAAlB;AACA,eAAS,QAAT,GAAoB,cAApB;;AAEA,iBAAW,YAAX,EAAyB,eAAe,IAAxC;AACD,KARH;AAUD,GAZD,MAYO,IAAI,SAAS,QAAT,GAAoB,CAApB,IAAyB,SAAS,QAAT,IAAqB,cAAlD,EAAkE;AACvE,aAAS,QAAT,IAAqB,YAArB;;AAEA,QAAI,IAAJ,CAAS,MAAT,CAAgB,SAAS,EAAzB,EAA6B,SAA7B,EAAwC,eAAe,SAAS,QAAhE;;AAEA,eAAW,YAAX,EAAyB,eAAe,IAAxC;AACD,GANM,MAMA,IAAI,SAAS,QAAT,IAAqB,CAAzB,EAA4B;AACjC,QAAI,IAAJ,CAAS,MAAT,CAAgB,SAAS,EAAzB,EAA6B,SAA7B,EAAwC,mBAAxC;;AAEA,aAAS,QAAT,GAAoB,IAApB;AACA,aAAS,EAAT,GAAc,IAAd;AACD,GALM,MAKA;AACL,YAAQ,GAAR,CAAY,wBAAZ;AACD;AACF;;AAED;;;;;;;AAOA,SAAS,YAAT,CAAsB,KAAtB,EAA6B,EAA7B,EAAiC;AAC/B,UAAQ,MAAM,WAAN,EAAR;AACA,UAAQ,GAAR,CAAY,mBAAZ,EAAiC,KAAjC;AACA,MAAI,MAAM,KAAN,CAAY,kBAAZ,CAAJ,EAAqC;AACnC,YAAQ,GAAR,CAAY,SAAZ,EAAuB,KAAvB;AACA,YAAQ,IAAR,CAAa,EAAC,IAAI,EAAL,EAAS,OAAO,KAAhB,EAAb;AACD,GAHD,MAGO,IAAI,MAAM,KAAN,CAAY,aAAZ,CAAJ,EAAgC;AACrC,YAAQ,GAAR,CAAY,eAAZ;AACA,QAAI,IAAJ,CAAS,EAAC,IAAI,EAAL,EAAS,OAAO,KAAhB,EAAT;AACD,GAHM,MAGA,IAAI,MAAM,KAAN,CAAY,oDAAZ,CAAJ,EAAuE;AAC5E,YAAQ,GAAR,CAAY,WAAZ;AACA,cAAU,IAAV,CAAe,EAAC,IAAI,EAAL,EAAS,OAAO,KAAhB,EAAf;AACD,GAHM,MAGA,IAAI,MAAM,KAAN,CAAY,QAAZ,CAAJ,EAA2B;AAChC,YAAQ,GAAR,CAAY,kBAAZ,EAAgC,MAAM,SAAN,CAAgB,CAAhB,CAAhC;AACA,UAAM,IAAN,CAAW,EAAC,IAAI,EAAL,EAAS,OAAO,MAAM,SAAN,CAAgB,CAAhB,CAAhB,EAAX;AACD,GAHM,MAGA;AACL,YAAQ,GAAR,CAAY,KAAZ;AACD;AACF;;AAED;;;;;;;AAOA,SAAS,WAAT,CAAqB,QAArB,EAA+B,EAA/B,EAAmC;AACjC,QAAM,cAAc,CAAC,GAAD,EAAM,OAAN,EAAe,SAAf,CAApB;;AAEA,OAAK,IAAI,UAAT,IAAuB,WAAvB,EAAoC;AAClC,SAAK,IAAI,KAAT,IAAkB,UAAlB,EAA8B;AAC5B,UAAI,MAAM,EAAN,KAAa,EAAjB,EAAqB;AACnB,cAAM,KAAN,GAAc,QAAd;AACA,eAAO,IAAP;AACD;AACF;AACF;;AAED,SAAO,KAAP;AACD;;AAED;;;;;;;;;;AAUA,SAAS,QAAT,CAAkB,MAAlB,EAA0B,IAA1B,EAAgC;AAC9B,SAAO,IAAP,CAAY,CAAC,CAAD,EAAI,CAAJ,KAAU,EAAE,KAAF,CAAQ,aAAR,CAAsB,EAAE,KAAxB,CAAtB;;AAEA,SAAO,OAAO,MAAP,KAAkB,IAAzB,EAA+B;AAC7B,WAAO,IAAP,CAAY,EAAC,IAAI,WAAL,EAAkB,OAAO,EAAzB,EAAZ;AACD;;AAED,SAAO,MAAP;AACD;;AAED;;;AAGA,SAAS,eAAT,GAA2B;AACzB,UAAQ,GAAR,CAAY,yBAAZ;AACA,MAAI,WAAW,IAAI,IAAJ,EAAf;AACA,MAAI,MAAM,SAAS,OAAT,EAAV;;AAEA,MAAI,SAAS,QAAT,KAAsB,EAA1B,EAA8B;AAC5B,aAAS,OAAT,CAAiB,SAAS,OAAT,KAAqB,CAAtC;AACD;;AAED;AACA;AACA,WAAS,QAAT,CAAkB,EAAlB;AACA,WAAS,UAAT,CAAoB,CAApB;AACA,WAAS,UAAT,CAAoB,CAApB;;AAEA,UAAQ,GAAR,CAAY,QAAZ,EAAsB,SAAS,OAAT,EAAtB,EAA0C,GAA1C;AACA,UAAQ,GAAR,CAAY,aAAZ,EAA2B,SAA3B;;AAEA,MAAI,WAAW,IAAI,QAAJ,CAAa,OAAb,CACb,SADa,EAEb,EAAC,QAAQ,MAAM,IAAf,EAAqB,QAAQ,SAAS,OAAT,KAAqB,IAAlD,EAFa,EAGb,IAHa,CAGP,IAAD,IAAU;AACf,SAAK,IAAI,OAAT,IAAoB,KAAK,QAAzB,EAAmC;AACjC,UAAI,QAAQ,QAAQ,IAApB;AACA,UAAI,MAAM,KAAN,CAAY,SAAZ,CAAJ,EAA4B;AAC1B;AACA,gBAAQ,MAAM,SAAN,CAAgB,EAAhB,CAAR;AACA;AACA,YAAI,MAAM,MAAN,CAAa,CAAb,MAAoB,GAAxB,EAA6B;AAC3B,kBAAQ,MAAM,SAAN,CAAgB,CAAhB,CAAR;AACD;AACD,qBAAa,KAAb,EAAoB,QAAQ,EAA5B;AACD;AACF;AACD,YAAQ,GAAR,CAAY,wBAAZ;AACD,GAjBc,CAAf;AAkBD;;AAED;;;AAGO,SAAS,SAAT,GAAqB;AAC1B,QAAM,sBAAc,KAAd,EAAqB,EAAC,UAAU,OAAX,EAArB,CAAN;AACA,QAAM,sBAAc,KAAd,CAAN;AACA,QAAM,wBAAN;;AAEA,MAAI,GAAJ,CAAQ,aAAR,EAAuB,KAAvB;AACA,MAAI,GAAJ,CAAQ,kBAAQ,MAAR,CAAe,QAAf,CAAR;;AAEA,MAAI,GAAJ,CAAQ,GAAR,EAAa,CAAC,GAAD,EAAM,GAAN,KAAc;AACzB,UAAM,YAAY,KAAK,GAAL,CAAS,QAAQ,MAAjB,EAAyB,IAAI,MAA7B,EAAqC,UAAU,MAA/C,CAAlB;AACA;;;;;;;;AASA,QAAI,MAAJ,CAAW,OAAX,EAAoB;AAClB,aAAO,cADW;AAElB,iBAAW,kCAFO;AAGlB,iBAAW,SAHO;AAIlB,iBAAW;AACT,yBAAiB,SAAS,IAAI,KAAJ,EAAT,EAAsB,SAAtB,CADR;AAET,mBAAW,SAAS,QAAQ,KAAR,EAAT,EAA0B,SAA1B,CAFF;AAGT,qBAAa,SAAS,UAAU,KAAV,EAAT,EAA4B,SAA5B,CAHJ;AAIT,iBAAS,SAAS,MAAM,KAAN,EAAT,EAAwB,SAAxB;AAJA;AAJO,KAApB;AAWD,GAtBD;;AAwBA,MAAI,MAAJ,CAAW,IAAX,EAAiB,MAAM;AACrB,YAAQ,GAAR,CAAY,0BAAZ,EAAwC,IAAxC;AACD,GAFD;;AAIA,MAAI,KAAJ;AACA,UAAQ,GAAR,CAAY,gBAAZ;;AAEA,MAAI,EAAJ,CAAO,mBAAW,OAAlB,EAA2B,UAAU,GAAV,EAAe;AACxC,YAAQ,GAAR,CAAY,oBAAZ,EAAkC,GAAlC;AACA,QAAI,mBAAM,IAAI,OAAV,CAAJ,EAAwB;AACtB,UAAI,QAAQ,IAAI,IAAhB;AACA,UAAI,MAAM,KAAN,CAAY,SAAZ,CAAJ,EAA4B;AAC1B;AACA,gBAAQ,MAAM,SAAN,CAAgB,EAAhB,CAAR;AACA;AACA,YAAI,MAAM,MAAN,CAAa,CAAb,MAAoB,GAAxB,EAA6B;AAC3B,kBAAQ,MAAM,SAAN,CAAgB,CAAhB,CAAR;AACD;AACD,qBAAa,KAAb,EAAoB,IAAI,EAAxB;AACD;AACF,KAXD,MAWO,IAAI,IAAI,OAAJ,KAAgB,6BAAqB,eAAzC,EAA0D;AAC/D,cAAQ,GAAR,CAAY,4BAAZ;AACA;AACA,UAAI,CAAC,oBAAO,SAAS,EAAhB,CAAD,IAAwB,IAAI,gBAAJ,CAAqB,EAArB,KAA4B,SAAS,EAAjE,EAAqE;AACnE,gBAAQ,GAAR,CAAY,+CAAZ;AACD,OAFD,MAEO;AACL,gBAAQ,GAAR,CAAY,0BAAZ;AACA,YAAI,QAAQ,IAAI,OAAJ,CAAY,IAAxB;AACA,YAAI,MAAM,KAAN,CAAY,SAAZ,CAAJ,EAA4B;AAC1B;AACA,kBAAQ,MAAM,SAAN,CAAgB,EAAhB,CAAR;AACA;AACA,cAAI,MAAM,MAAN,CAAa,CAAb,MAAoB,GAAxB,EAA6B;AAC3B,oBAAQ,MAAM,SAAN,CAAgB,CAAhB,CAAR;AACD;AACD,cAAI,YAAY,KAAZ,EAAmB,IAAI,OAAJ,CAAY,EAA/B,CAAJ,EAAwC;AACtC,oBAAQ,GAAR,CAAY,oBAAZ;AACD,WAFD,MAEO;AACL,oBAAQ,GAAR,CAAY,oCAAZ;AACA,yBAAa,KAAb,EAAoB,IAAI,OAAJ,CAAY,EAAhC;AACD;AACF;AACF;AACF;AACF,GArCD;;AAuCA,MAAI,EAAJ,CAAO,sBAAc,GAAd,CAAkB,qBAAzB,EAAgD,YAAY;AAC1D,YAAQ,GAAR,CAAY,WAAZ;AACA;AACA;AACA,eAAW,eAAX,EAA4B,IAA5B;AACD,GALD;AAMD","file":"server.js","sourcesContent":["import {RtmClient, RTM_EVENTS, RTM_MESSAGE_SUBTYPES, CLIENT_EVENTS, WebClient} from '@slack/client';\nimport {isNil, isNull} from 'lodash';\nimport express from 'express';\nimport config from '../config';\n\nconst token = config.slack.token;\n// #obedbot-testing id - 'G1TT0TBAA'\n//const channelId = 'G1TT0TBAA';\nconst channelId = config.slack.channelId;\nconst botUserId = config.slack.botId;\nconst atObedbot = new RegExp(\"^<@\" + botUserId + \">\");\n\nlet veglife = [];\nlet jpn = [];\nlet spaghetti = [];\nlet nakup = [];\n// ts = timestamp\nlet lastCall = {\n  ts: null,\n  timeLeft: null\n};\nconst lastCallLength = config.lastCall.length;\nconst lastCallStep = config.lastCall.step;\n\nconst port = config.port;\nlet rtm;\nlet web;\nlet app;\n\n/**\n * Makes the last call for orders\n */\nfunction makeLastCall() {\n  if (isNull(lastCall.ts)) {\n    lastCall.timeLeft = lastCallLength;\n    rtm.sendMessage('Last call ' + lastCall.timeLeft, channelId,\n      function messageSent(err, msg) {\n        console.log('Sent last call message', err, msg);\n        \n        lastCall.ts = msg.ts;\n        lastCall.timeLeft = lastCallLength;\n        \n        setTimeout(makeLastCall, lastCallStep * 1000);\n      }\n    );  \n  } else if (lastCall.timeLeft > 0 && lastCall.timeLeft <= lastCallLength) {\n    lastCall.timeLeft -= lastCallStep;\n    \n    web.chat.update(lastCall.ts, channelId, 'Last call ' + lastCall.timeLeft);\n    \n    setTimeout(makeLastCall, lastCallStep * 1000);\n  } else if (lastCall.timeLeft <= 0) {\n    web.chat.update(lastCall.ts, channelId, 'Koniec objednavok');\n    \n    lastCall.timeLeft = null;\n    lastCall.ts = null;\n  } else {\n    console.log('This should not happen');\n  }\n}\n\n/**\n * Checks the incoming order and assigns it to the correct restaurant\n *\n * @param {string} order - order message\n * @param {string} ts - timestamp of the order message\n *\n */\nfunction processOrder(order, ts) {\n  order = order.toLowerCase();\n  console.log('Processing order:', order);\n  if (order.match(/veg[1-4]\\+?[ps]?/)) {\n    console.log('Veglife', order);\n    veglife.push({ts: ts, order: order});\n  } else if (order.match(/[1-8]\\+[pk]/)) {\n    console.log('Jedlo pod nos');\n    jpn.push({ts: ts, order: order});\n  } else if (order.match(/[a-zA-Z]((300)|(400)|(450)|(600)|(800))[ps]?\\+[pt]/)) {\n    console.log('Spaghetti');\n    spaghetti.push({ts: ts, order: order});\n  } else if (order.match(/^nakup/)) {\n    console.log('andy chce kura a', order.substring(6));\n    nakup.push({ts: ts, order: order.substring(6)});\n  } else {\n    console.log('wtf');\n  }\n}\n\n/**\n * Updates the order with the given ts to newOrder\n *\n * @param {string} newOrder - new order message\n * @param {string} ts - timestamp of the order message\n * @returns {bool} - true if order with supplied ts is found, false otherwise\n */\nfunction updateOrder(newOrder, ts) {\n  const restaurants = [jpn, veglife, spaghetti];\n\n  for (let restaurant of restaurants) {\n    for (let order of restaurant) {\n      if (order.ts === ts) {\n        order.order = newOrder;\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\n/**\n * Pads and sorts the array to length 'size' with empty orders at the end.\n * Orders are sorted by arr[].order \n *\n * @param {Object[]} orders - Array with orders\n * @param {string} orders[].ts - Slack timestamp of the order message\n * @param {string} orders[].order - Message with the order\n * @param {number} size - desired length of the array\n * @returns {Object[]} - padded array with alphabetically ordered orders\n */\nfunction padArray(orders, size) {\n  orders.sort((a, b) => a.order.localeCompare(b.order));\n\n  while (orders.length !== size) {\n    orders.push({ts: 'fake time', order: ''});\n  }\n\n  return orders;\n}\n\n/**\n * Loads the orders since the last noon\n */\nfunction loadTodayOrders() {\n  console.log('Loading today\\'s orders');\n  let lastNoon = new Date();\n  let now = lastNoon.getTime();\n\n  if (lastNoon.getHours() < 12) {\n    lastNoon.setDate(lastNoon.getDate() - 1);\n  }\n\n  //TODO delete this line\n  //lastNoon.setDate(21);\n  lastNoon.setHours(12);\n  lastNoon.setMinutes(0);\n  lastNoon.setSeconds(0);\n\n  console.log(lastNoon, lastNoon.getTime(), now);\n  console.log('Channel id:', channelId);\n\n  let messages = web.channels.history(\n    channelId,\n    {latest: now / 1000, oldest: lastNoon.getTime() / 1000}\n  ).then((data) => {\n    for (let message of data.messages) {\n      let order = message.text;\n      if (order.match(atObedbot)) {\n        // 13 characters is the @obedbot string\n        order = order.substring(13)\n        // if someone used full colon\n        if (order.charAt(0) === ' ') {\n          order = order.substring(1);\n        }\n        processOrder(order, message.ts);\n      }\n    }\n    console.log('Loaded today\\'s orders');\n  });\n}\n\n/**\n * Starts the bot server\n */\nexport function runServer() {\n  rtm = new RtmClient(token, {logLevel: 'error'});\n  web = new WebClient(token);\n  app = express();\n\n  app.set('view engine', 'pug');\n  app.use(express.static('public'));\n\n  app.get('/', (req, res) => {\n    const maxOrders = Math.max(veglife.length, jpn.length, spaghetti.length);\n    /*console.log('Orders:');\n    console.log('Veglife:', veglife);\n    console.log('Jedlo pod nos:', jpn);\n    console.log('Leviathan:', spaghetti);\n\n    console.log('Veglife:', padArray(veglife.slice(), maxOrders));\n    console.log('Jedlo pod nos:', padArray(jpn.slice(), maxOrders));\n    console.log('Leviathan:', padArray(spaghetti.slice(), maxOrders));\n    */\n    res.render('index', {\n      title: 'Obedbot page',\n      tableName: 'Dne\\u0161n\\u00E9 objedn\\u00E1vky',\n      maxOrders: maxOrders,\n      allOrders: {\n        'Jedlo pod nos': padArray(jpn.slice(), maxOrders),\n        'Veglife': padArray(veglife.slice(), maxOrders),\n        'Spaghetti': padArray(spaghetti.slice(), maxOrders),\n        'Nakup': padArray(nakup.slice(), maxOrders)\n      },\n    });\n  });\n\n  app.listen(port, () => {\n    console.log('Server listening on port', port);\n  });\n\n  rtm.start();\n  console.log('server started');\n\n  rtm.on(RTM_EVENTS.MESSAGE, function (res) {\n    console.log('Message Arrived:\\n', res);\n    if (isNil(res.subtype)) {\n      let order = res.text;\n      if (order.match(atObedbot)) {\n        // 13 characters is the @obedbot string\n        order = order.substring(13)\n        // if someone used full colon\n        if (order.charAt(0) === ' ') {\n          order = order.substring(1);\n        }\n        processOrder(order, res.ts);\n      }\n    } else if (res.subtype === RTM_MESSAGE_SUBTYPES.MESSAGE_CHANGED) {\n      console.log('Received an edited message');\n      // edited last call message came in\n      if (!isNull(lastCall.ts) && res.previous_message.ts === lastCall.ts) {\n        console.log('Received last call message edited by obedbot.');\n      } else {\n        console.log('Received edited message.');\n        let order = res.message.text;\n        if (order.match(atObedbot)) {\n          // 13 characters is the @obedbot string\n          order = order.substring(13)\n          // if someone used full colon\n          if (order.charAt(0) === ' ') {\n            order = order.substring(1);\n          }\n          if (updateOrder(order, res.message.ts)) {\n            console.log('Update some order.');\n          } else {\n            console.log('Order with such id does not exist.');\n            processOrder(order, res.message.ts);\n          }\n        }\n      }\n    }\n  });\n\n  rtm.on(CLIENT_EVENTS.RTM.RTM_CONNECTION_OPENED, function () {\n    console.log('Connected');\n    // the timeout is here to go around a bug where connection is opened\n    // but not properly established\n    setTimeout(loadTodayOrders, 3000);\n  });\n}\n"]}